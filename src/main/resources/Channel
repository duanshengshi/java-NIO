所有的 NIO 操作始于通道，通道是数据来源或数据写入的目的地，主要地，我们将关心 java.nio 包中实现的以下几个 Channel：
    1、FileChannel：文件通道，用于文件的读和写
    2、DatagramChannel：用于 UDP 连接的接收和发送
    3、SocketChannel：把它理解为 TCP 连接通道，简单理解就是 TCP 客户端
    4、ServerSocketChannel：TCP 对应的服务端，用于监听某个端口进来的请求

Channel 经常翻译为通道，类似 IO 中的流，用于读取和写入。它与前面介绍的 Buffer 打交道。
    读操作的时候将 Channel 中的数据填充到 Buffer 中
    channel.read(buffer)，
    写操作时将 Buffer 中的数据写入到 Channel 中。
    channel.write(buffer)

一、FileChannel
    我想文件操作对于大家来说应该是最熟悉的，不过我们在说 NIO 的时候，其实 FileChannel 并不是关注的重点。
    而且后面我们说非阻塞的时候会看到，FileChannel 是不支持非阻塞的。

    初始化：
    FileInputStream inputStream = new FileInputStream(new File("/data.txt"));
    FileChannel fileChannel = inputStream.getChannel();
    当然了，我们也可以从 RandomAccessFile#getChannel 来得到 FileChannel。

    读取文件内容：
    ByteBuffer buffer = ByteBuffer.allocate(1024);
    int num = fileChannel.read(buffer);
    前面我们也说了，所有的 Channel 都是和 Buffer 打交道的。

    写入文件内容：
    ByteBuffer buffer = ByteBuffer.allocate(1024);
    buffer.put("随机写入一些内容到 Buffer 中".getBytes());
    // Buffer 切换为读模式
    buffer.flip();
    while(buffer.hasRemaining()) {
        // 将 Buffer 中的内容写入文件
        fileChannel.write(buffer);
    }

二、SocketChannel
    我们可以将 SocketChannel 理解成一个 TCP 客户端。虽然这么理解有点狭隘，
    因为我们在介绍 ServerSocketChannel 的时候会看到另一种使用方式。

    1、打开一个 TCP 连接：
        SocketChannel socketChannel = SocketChannel.open(new InetSocketAddress("https://www.javadoop.com", 80));

        当然了，上面的这行代码等价于下面的两行：
        // 打开一个通道
        SocketChannel socketChannel = SocketChannel.open();
        // 发起连接
        socketChannel.connect(new InetSocketAddress("https://www.javadoop.com", 80));

    2、SocketChannel 的读写和 FileChannel 没什么区别，就是操作缓冲区。
        // 读取数据
        socketChannel.read(buffer);
        // 写入数据到网络连接中
        while(buffer.hasRemaining()) {
            socketChannel.write(buffer);
        }

三、ServerSocketChannel
    SocketChannel 是 TCP 客户端，这里说的 ServerSocketChannel 就是对应的服务端。
    ServerSocketChannel 用于监听机器端口，管理从这个端口进来的 TCP 连接。

    // 实例化
    ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();
    // 监听 8080 端口
    serverSocketChannel.socket().bind(new InetSocketAddress(8080));

    while (true) {
        // 一旦有一个 TCP 连接进来，就对应创建一个 SocketChannel 进行处理
        SocketChannel socketChannel = serverSocketChannel.accept();
    }

    这里我们可以看到 SocketChannel 的第二个实例化方式
    到这里，我们应该能理解 SocketChannel 了，它不仅仅是 TCP 客户端，它代表的是一个网络通道，可读可写。

    ServerSocketChannel 不和 Buffer 打交道了，因为它并不实际处理数据，它一旦接收到请求后，实例化 SocketChannel，
    之后在这个连接通道上的数据传递它就不管了，因为它需要继续监听端口，等待下一个连接。

四、DatagramChannel
    UDP 和 TCP 不一样，DatagramChannel 一个类处理了服务端和客户端。（UDP 是面向无连接的，不需要和对方握手，
    不需要通知对方，就可以直接将数据包投出去，至于能不能送达，它是不知道的）

    监听端口：
    DatagramChannel channel = DatagramChannel.open();
    channel.socket().bind(new InetSocketAddress(9090));
    ByteBuffer buf = ByteBuffer.allocate(48);
    channel.receive(buf);

    发送数据：
    String newData = "New String to write to file..."
                        + System.currentTimeMillis();
    ByteBuffer buf = ByteBuffer.allocate(48);
    buf.put(newData.getBytes());
    buf.flip();
    int bytesSent = channel.send(buf, new InetSocketAddress("jenkov.com", 80));
