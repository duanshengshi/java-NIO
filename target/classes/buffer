一个 Buffer 本质上是内存中的一块，我们可以将数据写入这块内存，之后从这块内存获取数据。
Buffer包括：CharBuffer  ShortBuffer  IntBuffer  LongBuffer  FloatBuffer  DoubleBuffer  ByteBuffer(MappedByteBuffer)

核心是ByteBuffer，用得最多的通常也是ByteBuffer。

一、Buffer 中也有三个重要属性：position、limit、capacity
1、capacity：代表缓冲区的容量，一旦设定就不可以更改；一旦 Buffer 的容量达到 capacity，需要清空 Buffer，才能重新写入值
2、position：的初始值是 0，每往 Buffer 中写入一个值，position 就自动加 1，代表下一次的写入位置。读操作的时候也是类似的，
    每读一个值，position 就自动加 1。
    从写操作模式到读操作模式切换的时候（flip），position 都会归零，这样就可以从头开始读写了。
3、Limit：写操作模式下，limit 代表的是最大能写入的数据，这个时候 limit 等于 capacity。写结束后，切换到读模式，
    此时的 limit 等于 Buffer 中实际的数据大小，因为 Buffer 不一定被写满了。

二、初始化Buffer
1、每个 Buffer 实现类都提供了一个静态方法 allocate(int capacity) 帮助我们快速实例化一个 Buffer
    ByteBuffer byteBuf = ByteBuffer.allocate(1024);
2、使用 wrap 方法来初始化一个 Buffer
    public static ByteBuffer wrap(byte[] array) {
        ...
    }

三、填充Buffer
1、各个 Buffer 类都提供了一些 put 方法用于将数据填充到 Buffer 中，如 ByteBuffer 中的几个 put 方法：
    // 填充一个 byte 值
    public abstract ByteBuffer put(byte b);
    // 在指定位置填充一个 int 值
    public abstract ByteBuffer put(int index, byte b);
    // 将一个数组中的值填充进去
    public final ByteBuffer put(byte[] src) {...}
    public ByteBuffer put(byte[] src, int offset, int length) {...}

    上述方法需要自己控制填入Buffer的数据大小，不能超过capacity，否则抛出 java.nio.BufferOverflowException

2、对于 Buffer 来说，另一个常见的操作中就是，我们要将来自 Channel 的数据填充到 Buffer 中，在系统层面上，
    这个操作我们称为读操作，因为数据是从外部（文件或网络等）读到内存中。

    int num = channel.read(buf);//返回从 Channel 中读入到 Buffer 的数据大小。

四、提取 Buffer 中的值
1、前面介绍了写操作，每写入一个值，position 的值都需要加 1，所以 position 最后会指向最后一次写入的位置的后面一个，
    如果 Buffer 写满了，那么 position 等于 capacity（position 从 0 开始）。如果要读 Buffer 中的值，需要切换模式，
    从写入模式切换到读出模式。注意，通常在说 NIO 的读操作的时候，我们说的是从 Channel 中读数据到 Buffer 中，
    对应的是对 Buffer 的写入操作，初学者需要理清楚这个。

2、调用 Buffer 的 flip() 方法，可以从写入模式切换到读取模式。其实这个方法也就是设置了一下 position 和 limit 值罢了。
    public final Buffer flip() {
        limit = position; // 将 limit 设置为实际写入的数据数量
        position = 0; // 重置 position 为 0
        mark = -1; // mark 之后再说
        return this;
    }
3、提供了一系列的 get 方法
    // 根据 position 来获取数据
    public abstract byte get();
    // 获取指定位置的数据
    public abstract byte get(int index);
    // 将 Buffer 中的数据写入到数组中
    public ByteBuffer get(byte[] dst)

    一个经常使用的方法：
    new String(buffer.array()).trim();
4、除了将数据从 Buffer 取出来使用，更常见的操作是将我们写入的数据传输到 Channel 中，
    如通过 FileChannel 将数据写入到文件中，通过 SocketChannel 将数据写入网络发送到远程机器等。
    对应的，这种操作，我们称之为写操作。

    int num = channel.write(buf);

五、其他的一些方法
1、mark() & reset()
    除了 position、limit、capacity 这三个基本的属性外，还有一个常用的属性就是 mark。

    mark 用于临时保存 position 的值，每次调用 mark() 方法都会将 mark 设值为当前的 position，便于后续需要的时候使用。

    public final Buffer mark() {
        mark = position;
        return this;
    }

    那到底什么时候用呢？考虑以下场景，我们在 position 为 5 的时候，先 mark() 一下，然后继续往下读，读到第 10 的时候，
    我想重新回到 position 为 5 的地方重新来一遍，那只要调一下 reset() 方法，position 就回到 5 了。

    public final Buffer reset() {
        int m = mark;
        if (m < 0)
            throw new InvalidMarkException();
        position = m;
        return this;
    }
2、rewind() & clear() & compact()
    rewind()：会重置 position 为 0，通常用于重新从头读写 Buffer。

    public final Buffer rewind() {
        position = 0;
        mark = -1;
        return this;
    }
    clear()：有点重置 Buffer 的意思，相当于重新实例化了一样。

    通常，我们会先填充 Buffer，然后从 Buffer 读取数据，之后我们再重新往里填充新的数据，我们一般在重新填充之前先调用 clear()。

    public final Buffer clear() {
        position = 0;
        limit = capacity;
        mark = -1;
        return this;
    }
    compact()：和 clear() 一样的是，它们都是在准备往 Buffer 填充新的数据之前调用。

    前面说的 clear() 方法会重置几个属性，但是我们要看到，clear() 方法并不会将 Buffer 中的数据清空，
    只不过后续的写入会覆盖掉原来的数据，也就相当于清空了数据了。

    而 compact() 方法有点不一样，调用这个方法以后，会先处理还没有读取的数据，也就是 position 到 limit 之间的数据
    （还没有读过的数据），先将这些数据移到左边，然后在这个基础上再开始写入。很明显，此时 limit 还是等于
    capacity，position 指向原来数据的右边。